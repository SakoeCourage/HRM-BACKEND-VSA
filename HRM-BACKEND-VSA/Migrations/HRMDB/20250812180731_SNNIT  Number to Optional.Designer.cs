// <auto-generated />
using System;
using HRM_BACKEND_VSA.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HRM_BACKEND_VSA.Migrations.HRMDB
{
    [DbContext(typeof(HRMDBContext))]
    [Migration("20250812180731_SNNIT  Number to Optional")]
    partial class SNNITNumbertoOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Allowance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("allowance")
                        .HasColumnType("double precision");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("code")
                        .IsUnique();

                    b.ToTable("Allowance");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Applicant.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("applicationStatus")
                        .HasColumnType("text");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("firsName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("hasSubmittedApplication")
                        .HasColumnType("boolean");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Applicant.ApplicantBioData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ECOWASCardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GPSAddress")
                        .HasColumnType("text");

                    b.Property<string>("SNNITNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("applicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("birthCertificate")
                        .HasColumnType("text");

                    b.Property<string>("citizenship")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("controllerStaffNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("disability")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("highestQualification")
                        .HasColumnType("text");

                    b.Property<string>("highestQualificationCertificate")
                        .HasColumnType("text");

                    b.Property<string>("nssCertificate")
                        .HasColumnType("text");

                    b.Property<string>("nssNumber")
                        .HasColumnType("text");

                    b.Property<string>("otherNames")
                        .HasColumnType("text");

                    b.Property<string>("passportNumber")
                        .HasColumnType("text");

                    b.Property<string>("passportPicture")
                        .HasColumnType("text");

                    b.Property<string>("phoneOne")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phoneTwo")
                        .HasColumnType("text");

                    b.Property<string>("placeOfService")
                        .HasColumnType("text");

                    b.Property<string>("surName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("yearOfService")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("applicantId")
                        .IsUnique();

                    b.HasIndex("phoneOne")
                        .IsUnique();

                    b.ToTable("ApplicantBioData");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Applicant.ApplicantEducationalBackground", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("applicantBioDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("certificate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("institutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("yearCompleted")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("applicantBioDataId");

                    b.ToTable("ApplicantEducationalBackground");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Applicant.ApplicantHasOTP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("applicantID")
                        .HasColumnType("uuid");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("otp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("applicantID")
                        .IsUnique();

                    b.ToTable("ApplicantHasOTP");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("categoryName")
                        .IsUnique();

                    b.ToTable("Category");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("depHeadOfDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("departmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("directorateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("headOfDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("depHeadOfDepartmentId")
                        .IsUnique();

                    b.HasIndex("directorateId");

                    b.HasIndex("headOfDepartmentId")
                        .IsUnique();

                    b.ToTable("Department");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Directorate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("depDirectoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("directorId")
                        .HasColumnType("uuid");

                    b.Property<string>("directorateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("depDirectoryId")
                        .IsUnique();

                    b.HasIndex("directorId")
                        .IsUnique();

                    b.ToTable("Directorate");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("categoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("gradeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("marketPremium")
                        .HasColumnType("double precision");

                    b.Property<int>("maximumStep")
                        .HasColumnType("integer");

                    b.Property<int>("minimumStep")
                        .HasColumnType("integer");

                    b.Property<string>("scale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("categoryId");

                    b.HasIndex("gradeName")
                        .IsUnique();

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.GradeStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("gradeId")
                        .HasColumnType("uuid");

                    b.Property<double>("marketPreBaseSalary")
                        .HasColumnType("double precision");

                    b.Property<double>("salary")
                        .HasColumnType("double precision");

                    b.Property<int>("stepIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("gradeId");

                    b.ToTable("GradeStep");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.ProfessionalBody", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProfessionalBody");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.RoleHasPermissions", b =>
                {
                    b.Property<Guid>("roleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("permissionId")
                        .HasColumnType("uuid");

                    b.HasKey("roleId", "permissionId");

                    b.HasIndex("permissionId");

                    b.ToTable("RoleHasPermissions", (string)null);
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.StaffRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestDetailPolymorphicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("requestAssignedStaffId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("requestFromStaffId")
                        .HasColumnType("uuid");

                    b.Property<string>("requestType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RequestDetailPolymorphicId");

                    b.HasIndex("requestAssignedStaffId");

                    b.HasIndex("requestFromStaffId");

                    b.ToTable("StaffRequest");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.UserHasOTP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("otp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("UserHasOTP");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.UserHasRole", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uuid");

                    b.HasKey("userId", "roleId");

                    b.HasIndex("roleId");

                    b.ToTable("UserHasRole");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Notification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("notifiableId")
                        .HasColumnType("uuid");

                    b.Property<string>("notifiableType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("readAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("categoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("specialityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("categoryId");

                    b.HasIndex("specialityName")
                        .IsUnique();

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ECOWASCardNumber")
                        .HasColumnType("text");

                    b.Property<string>("GPSAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SNNITNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("disability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isAlterable")
                        .HasColumnType("boolean");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("lastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("otherNames")
                        .HasColumnType("text");

                    b.Property<string>("passportPicture")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("specialityId")
                        .HasColumnType("uuid");

                    b.Property<string>("staffIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ECOWASCardNumber")
                        .IsUnique();

                    b.HasIndex("SNNITNumber")
                        .IsUnique();

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("phone")
                        .IsUnique();

                    b.HasIndex("specialityId");

                    b.HasIndex("staffIdentificationNumber")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffAccomodationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("accomodationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("allocationDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("flatNumber")
                        .HasColumnType("text");

                    b.Property<string>("gpsAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isAlterable")
                        .HasColumnType("boolean");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("staffId")
                        .IsUnique();

                    b.ToTable("StaffAccomodationDetail");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffAccomodationUpdateHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("accomodationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("allocationDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("flatNumber")
                        .HasColumnType("text");

                    b.Property<string>("gpsAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("staffId");

                    b.ToTable("StaffAccomodationUpdateHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("appointmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("endDate")
                        .HasColumnType("date");

                    b.Property<Guid>("gradeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("notionalDate")
                        .HasColumnType("date");

                    b.Property<string>("paymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("staffSpecialityId")
                        .HasColumnType("uuid");

                    b.Property<string>("staffType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("step")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("substantiveDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("gradeId");

                    b.HasIndex("staffId")
                        .IsUnique();

                    b.HasIndex("staffSpecialityId");

                    b.ToTable("StaffAppointment");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffAppointmentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("appointmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("endDate")
                        .HasColumnType("date");

                    b.Property<Guid>("gradeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("notionalDate")
                        .HasColumnType("date");

                    b.Property<string>("paymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("staffSpecialityId")
                        .HasColumnType("uuid");

                    b.Property<string>("staffType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("step")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("substantiveDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("gradeId");

                    b.HasIndex("staffId");

                    b.HasIndex("staffSpecialityId");

                    b.ToTable("StaffAppointmentHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffBankDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("accountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("accountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("bankId")
                        .HasColumnType("uuid");

                    b.Property<string>("branch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isAlterable")
                        .HasColumnType("boolean");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("bankId");

                    b.HasIndex("staffId")
                        .IsUnique();

                    b.ToTable("StaffBankDetail");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffBankUpdateHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("accountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("accountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("bankId")
                        .HasColumnType("uuid");

                    b.Property<string>("branch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("staffId");

                    b.ToTable("StaffBankUpdateHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffBioUpdateHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ECOWASCardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GPSAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SNNITNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("disability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("otherNames")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("specialityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<string>("staffIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("staffId");

                    b.ToTable("StaffBioUpdateHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffChildrenDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("childName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isAlterable")
                        .HasColumnType("boolean");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("staffId");

                    b.ToTable("StaffChildrenDetail");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffChildrenUpdateHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("childName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("dateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("staffId");

                    b.ToTable("StaffChildrenUpdateHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffFamilyDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("emergencyPerson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("emergencyPersonPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("fathersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isAlterable")
                        .HasColumnType("boolean");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("mothersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nextOfKIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nextOfKINPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("spouseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("spousePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("staffId")
                        .IsUnique();

                    b.ToTable("StaffFamilyDetail");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffFamilyUpdatetHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("emergencyPerson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("emergencyPersonPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("fathersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("mothersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nextOfKIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nextOfKINPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("spouseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("spousePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("staffId");

                    b.ToTable("StaffFamilyUpdatetHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffPosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("departmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("directorateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isAlterable")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("postingDate")
                        .HasColumnType("date");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("unitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("departmentId")
                        .IsUnique();

                    b.HasIndex("directorateId")
                        .IsUnique();

                    b.HasIndex("staffId")
                        .IsUnique();

                    b.HasIndex("unitId")
                        .IsUnique();

                    b.ToTable("StaffPosting");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffPostingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("departmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("directorateId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("postingDate")
                        .HasColumnType("date");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("unitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("departmentId");

                    b.HasIndex("directorateId");

                    b.HasIndex("staffId");

                    b.HasIndex("unitId");

                    b.ToTable("StaffPostingHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffProfessionalLincense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("expiryDate")
                        .HasColumnType("date");

                    b.Property<bool>("isAlterable")
                        .HasColumnType("boolean");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("issuedDate")
                        .HasColumnType("date");

                    b.Property<string>("pin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("professionalBodyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("professionalBodyId");

                    b.HasIndex("staffId")
                        .IsUnique();

                    b.ToTable("StaffProfessionalLincense");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffProfessionalLincenseUpdateHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("expiryDate")
                        .HasColumnType("date");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("issuedDate")
                        .HasColumnType("date");

                    b.Property<string>("pin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("professionalBodyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("professionalBodyId");

                    b.HasIndex("staffId");

                    b.ToTable("StaffProfessionalLincenseUpdateHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.TaxRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("year")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("year")
                        .IsUnique();

                    b.ToTable("TaxRate");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.TaxRateDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("rate")
                        .HasColumnType("double precision");

                    b.Property<string>("taxCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("taxRateId")
                        .HasColumnType("uuid");

                    b.Property<double>("taxableIncome")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("taxRateId");

                    b.ToTable("TaxRateDetail");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("departmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("directorateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("unitHeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("unitName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("departmentId");

                    b.HasIndex("directorateId");

                    b.HasIndex("unitHeadId")
                        .IsUnique();

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("departmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("emailVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("hasResetPassword")
                        .HasColumnType("boolean");

                    b.Property<bool>("isAccountActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("lastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("roleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("staffId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("unitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("departmentId");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("roleId");

                    b.HasIndex("staffId")
                        .IsUnique();

                    b.HasIndex("unitId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Model.SMS.SMSCampaignHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("campaignName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("receipients")
                        .HasColumnType("integer");

                    b.Property<Guid?>("smsTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("smsTemplateId");

                    b.ToTable("SMSCampaignHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Model.SMS.SMSCampaignReceipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("campaignHistoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .HasColumnType("text");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .HasColumnType("text")
                        .HasComment("Status => Pending or Successful or Failed");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("campaignHistoryId");

                    b.ToTable("SMSCampaignReceipient");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Model.SMS.SMSTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("readOnly")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SMSTemplate");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Applicant.ApplicantBioData", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Applicant.Applicant", "Applicant")
                        .WithOne("bioData")
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Applicant.ApplicantBioData", "applicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Applicant.ApplicantEducationalBackground", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Applicant.ApplicantBioData", null)
                        .WithMany("educationalBackground")
                        .HasForeignKey("applicantBioDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Applicant.ApplicantHasOTP", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Applicant.Applicant", "applicant")
                        .WithOne("otp")
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Applicant.ApplicantHasOTP", "applicantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicant");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Department", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "depHeadOfDepartment")
                        .WithOne()
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Department", "depHeadOfDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HRM_BACKEND_VSA.Entities.Directorate", "directorate")
                        .WithMany("departments")
                        .HasForeignKey("directorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "headOfDepartment")
                        .WithOne()
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Department", "headOfDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("depHeadOfDepartment");

                    b.Navigation("directorate");

                    b.Navigation("headOfDepartment");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Directorate", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "depDirector")
                        .WithOne()
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Directorate", "depDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "director")
                        .WithOne()
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Directorate", "directorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("depDirector");

                    b.Navigation("director");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Grade", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Category", "category")
                        .WithMany("grades")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.GradeStep", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Grade", "grade")
                        .WithMany("steps")
                        .HasForeignKey("gradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("grade");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.RoleHasPermissions", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Permission", "permission")
                        .WithMany()
                        .HasForeignKey("permissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.StaffRequest", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "requestAssignedStaff")
                        .WithMany()
                        .HasForeignKey("requestAssignedStaffId");

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "requestFromStaff")
                        .WithMany()
                        .HasForeignKey("requestFromStaffId");

                    b.Navigation("requestAssignedStaff");

                    b.Navigation("requestFromStaff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.UserHasOTP", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.UserHasRole", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Speciality", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Category", "category")
                        .WithMany("specialities")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.Staff", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Speciality", "speciality")
                        .WithMany("staffs")
                        .HasForeignKey("specialityId");

                    b.Navigation("speciality");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffAccomodationDetail", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithOne("staffAccomodation")
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Staff.StaffAccomodationDetail", "staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffAccomodationUpdateHistory", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithMany()
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffAppointment", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Grade", "grade")
                        .WithMany("appointments")
                        .HasForeignKey("gradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithOne("currentAppointment")
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Staff.StaffAppointment", "staffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Speciality", "speciality")
                        .WithMany()
                        .HasForeignKey("staffSpecialityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("grade");

                    b.Navigation("speciality");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffAppointmentHistory", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Grade", "grade")
                        .WithMany()
                        .HasForeignKey("gradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithMany("appointmentHistory")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Speciality", "speciality")
                        .WithMany()
                        .HasForeignKey("staffSpecialityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("grade");

                    b.Navigation("speciality");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffBankDetail", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.HR_Manag.Bank", "bank")
                        .WithMany("staffbankDetails")
                        .HasForeignKey("bankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithOne("bankDetail")
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Staff.StaffBankDetail", "staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bank");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffBankUpdateHistory", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithMany()
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffBioUpdateHistory", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithMany()
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffChildrenDetail", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithMany("staffChildren")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffChildrenUpdateHistory", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithMany()
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffFamilyDetail", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithOne("familyDetail")
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Staff.StaffFamilyDetail", "staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffFamilyUpdatetHistory", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithMany()
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffPosting", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Department", "department")
                        .WithOne()
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Staff.StaffPosting", "departmentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("HRM_BACKEND_VSA.Entities.Directorate", "directorate")
                        .WithOne()
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Staff.StaffPosting", "directorateId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "Staff")
                        .WithOne()
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Staff.StaffPosting", "staffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Unit", "unit")
                        .WithOne()
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Staff.StaffPosting", "unitId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Staff");

                    b.Navigation("department");

                    b.Navigation("directorate");

                    b.Navigation("unit");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffPostingHistory", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Department", "department")
                        .WithMany()
                        .HasForeignKey("departmentId");

                    b.HasOne("HRM_BACKEND_VSA.Entities.Directorate", "directorate")
                        .WithMany()
                        .HasForeignKey("directorateId");

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Unit", "unit")
                        .WithMany()
                        .HasForeignKey("unitId");

                    b.Navigation("Staff");

                    b.Navigation("department");

                    b.Navigation("directorate");

                    b.Navigation("unit");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffProfessionalLincense", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.HR_Manag.ProfessionalBody", "ProfessionalBody")
                        .WithMany("staffProfessionalLincense")
                        .HasForeignKey("professionalBodyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithOne("professionalLincense")
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Staff.StaffProfessionalLincense", "staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalBody");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.StaffProfessionalLincenseUpdateHistory", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.HR_Manag.ProfessionalBody", "ProfessionalBody")
                        .WithMany()
                        .HasForeignKey("professionalBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithMany()
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalBody");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.TaxRateDetail", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.TaxRate", "TaxRate")
                        .WithMany("taxRateDetails")
                        .HasForeignKey("taxRateId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Unit", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Department", "department")
                        .WithMany("units")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Directorate", "directorate")
                        .WithMany("units")
                        .HasForeignKey("directorateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "unitHead")
                        .WithOne("unit")
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.Unit", "unitHeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("department");

                    b.Navigation("directorate");

                    b.Navigation("unitHead");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.User", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Entities.Department", "department")
                        .WithMany("users")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Role", "role")
                        .WithMany("users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Staff.Staff", "staff")
                        .WithOne("user")
                        .HasForeignKey("HRM_BACKEND_VSA.Entities.User", "staffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("HRM_BACKEND_VSA.Entities.Unit", "unit")
                        .WithMany("users")
                        .HasForeignKey("unitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("role");

                    b.Navigation("staff");

                    b.Navigation("unit");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Model.SMS.SMSCampaignHistory", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Model.SMS.SMSTemplate", "smsTemplate")
                        .WithMany("smsHistory")
                        .HasForeignKey("smsTemplateId");

                    b.Navigation("smsTemplate");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Model.SMS.SMSCampaignReceipient", b =>
                {
                    b.HasOne("HRM_BACKEND_VSA.Model.SMS.SMSCampaignHistory", "campaignHistory")
                        .WithMany("smsReceipients")
                        .HasForeignKey("campaignHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("campaignHistory");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Applicant.Applicant", b =>
                {
                    b.Navigation("bioData")
                        .IsRequired();

                    b.Navigation("otp")
                        .IsRequired();
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Applicant.ApplicantBioData", b =>
                {
                    b.Navigation("educationalBackground");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Category", b =>
                {
                    b.Navigation("grades");

                    b.Navigation("specialities");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Department", b =>
                {
                    b.Navigation("units");

                    b.Navigation("users");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Directorate", b =>
                {
                    b.Navigation("departments");

                    b.Navigation("units");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Grade", b =>
                {
                    b.Navigation("appointments");

                    b.Navigation("steps");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.Bank", b =>
                {
                    b.Navigation("staffbankDetails");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.HR_Manag.ProfessionalBody", b =>
                {
                    b.Navigation("staffProfessionalLincense");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Speciality", b =>
                {
                    b.Navigation("staffs");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Staff.Staff", b =>
                {
                    b.Navigation("appointmentHistory");

                    b.Navigation("bankDetail")
                        .IsRequired();

                    b.Navigation("currentAppointment")
                        .IsRequired();

                    b.Navigation("familyDetail")
                        .IsRequired();

                    b.Navigation("professionalLincense")
                        .IsRequired();

                    b.Navigation("staffAccomodation")
                        .IsRequired();

                    b.Navigation("staffChildren");

                    b.Navigation("unit")
                        .IsRequired();

                    b.Navigation("user")
                        .IsRequired();
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.TaxRate", b =>
                {
                    b.Navigation("taxRateDetails");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Entities.Unit", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Model.SMS.SMSCampaignHistory", b =>
                {
                    b.Navigation("smsReceipients");
                });

            modelBuilder.Entity("HRM_BACKEND_VSA.Model.SMS.SMSTemplate", b =>
                {
                    b.Navigation("smsHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
